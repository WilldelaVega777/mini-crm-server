#---------------------------------------------
# Scalar Data Types
#---------------------------------------------
scalar Date

#---------------------------------------------
# Data Types
#---------------------------------------------
type Customer {
    id          : ID!
    first_name  : String!
    last_name   : String!
    company     : String!
    age         : Int!
    emails      : [Email!]!
    type        : CustomerType!
    orders      : [Order]
}
#---------------------------------------------
type Email {
    email : String
}
#---------------------------------------------
type Order {
    id          : ID!
    date        : Date!
    customer    : ID!
    status      : OrderStatus!
    items       : [OrderItem!]!
    total       : Float!
}
#---------------------------------------------
type OrderItem {
    id          : ID
    quantity    : Int
    product     : Product
}
#---------------------------------------------
type Product {
    id              : ID!
    name            : String!
    price           : Float!
    projected_stock : Int
    stock           : Int!
    reorder         : Int!
}
#---------------------------------------------
type TopCustomer {
    name    : String
    total   : Float
}

#---------------------------------------------
# Composite Metadata Types
#---------------------------------------------
type CustomerPaginated {
    customers   : [Customer!]!
    metadata    : PaginatedMetadata!
}
#---------------------------------------------
type ProductPaginated {
    products    : [Product!]!
    metadata    : PaginatedMetadata!
}
#---------------------------------------------
type OrderPaginated {
    orders      : [Order!]!
    metadata    : PaginatedMetadata!
}
#---------------------------------------------
type PaginatedMetadata {
    totalRecords: Int!
}

#---------------------------------------------
# Enums
#---------------------------------------------
enum CustomerType {
    BASIC
    PREMIUM
}
#---------------------------------------------
enum OrderStatus {
    REQUESTED
    CANCELLED
    DISPATCHED
    PAID
}

#---------------------------------------------
# Queries (Data)
#---------------------------------------------
type Query {

    # Customers:
    customers(limit: Int, offset: Int): [Customer!]!
    getCustomers(limit: Int, offset: Int): CustomerPaginated!
    getCustomer(id: ID): Customer

    # Products:
    getProducts(limit: Int, offset: Int, stock: Boolean): ProductPaginated!
    getProduct(id: ID): Product

    # Orders:
    getOrders(limit: Int, offset: Int): OrderPaginated!
    getOrder(id: ID): Order
    getOrdersByCustomer(limit: Int, offset: Int, id: ID): OrderPaginated!

    # Dashboard:
    getTopCustomers: [TopCustomer]

}

#---------------------------------------------
# Mutation Input Types
#---------------------------------------------
input CustomerInput {
    id          : ID,
    first_name  : String!
    last_name   : String!
    company     : String!
    age         : Int!
    type        : CustomerType!
    emails      : [EmailInput!]!
    orders      : [OrderInput]
}
#---------------------------------------------
input ProductInput {
    id              : ID
    name            : String!
    price           : Float!
    projected_stock : Int
    stock           : Int!
    reorder         : Int!
}
#---------------------------------------------
input EmailInput {
    email       : String!
}
#---------------------------------------------
input OrderInput {
    id          : ID
    date        : Date!
    customer    : ID!
    status      : OrderStatus!
    items       : [OrderItemInput!]!
    total       : Float!
}
#---------------------------------------------
input OrderItemInput {
    id          : ID
    quantity    : Int!
    product     : ProductInput!
}
#---------------------------------------------
# Mutations
#---------------------------------------------
type Mutation {

    # Customer
    createCustomer(input: CustomerInput) : Customer
    updateCustomer(input: CustomerInput) : Customer
    removeCustomer(input: ID!) : String

    # Product
    createProduct(input: ProductInput) : Product
    updateProduct(input: ProductInput) : Product
    removeProduct(input: ID!) : String

    # Order
    createOrder(input: OrderInput) : Order
    updateOrder(input: OrderInput) : Order
    removeOrder(input: ID!) : String

}
